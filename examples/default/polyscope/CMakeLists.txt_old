cmake_minimum_required(VERSION 2.8.9)

### Compiler options
set( CMAKE_EXPORT_COMPILE_COMMANDS 1 ) # Emit a compile flags file to support completion engines 

if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # using Clang (linux or apple) or GCC
  message("Using clang/gcc compiler flags")
  SET(BASE_CXX_FLAGS "-std=c++11 -Wall -Wextra -Werror -g3")
  SET(DISABLED_WARNINGS " -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-deprecated-declarations -Wno-missing-braces")
  SET(TRACE_INCLUDES " -H -Wno-error=unused-command-line-argument")

  if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    message("Setting clang-specific options")
    SET(BASE_CXX_FLAGS "${BASE_CXX_FLAGS} -ferror-limit=5 -fcolor-diagnostics")
    SET(CMAKE_CXX_FLAGS_DEBUG          "-fsanitize=address -fno-limit-debug-info")
  elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(BASE_CXX_FLAGS "${BASE_CXX_FLAGS} -fmax-errors=5")
    message("Setting gcc-specific options")
    SET(DISABLED_WARNINGS "${DISABLED_WARNINGS} -Wno-maybe-uninitialized -Wno-format-zero-length -Wno-unused-but-set-parameter -Wno-unused-but-set-variable")
  endif()


  SET(CMAKE_CXX_FLAGS "${BASE_CXX_FLAGS} ${DISABLED_WARNINGS}")
  #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TRACE_INCLUDES}") # uncomment if you need to track down where something is getting included from
  SET(CMAKE_CXX_FLAGS_DEBUG          "${CMAKE_CXX_FLAGS_DEBUG} -g3")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
  SET(CMAKE_CXX_FLAGS_RELEASE        "-march=native -O3 -DNDEBUG")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  # using Visual Studio C++
  message("Using Visual Studio compiler flags")
  set(BASE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  set(BASE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP") # parallel build
  SET(DISABLED_WARNINGS "${DISABLED_WARNINGS} /wd\"4267\"")  # ignore conversion to smaller type (fires more aggressively than the gcc version, which is annoying)
  SET(DISABLED_WARNINGS "${DISABLED_WARNINGS} /wd\"4244\"")  # ignore conversion to smaller type (fires more aggressively than the gcc version, which is annoying)
  SET(DISABLED_WARNINGS "${DISABLED_WARNINGS} /wd\"4305\"")  # ignore truncation on initialization
  SET(CMAKE_CXX_FLAGS "${BASE_CXX_FLAGS} ${DISABLED_WARNINGS}")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")

  add_definitions(/D "_CRT_SECURE_NO_WARNINGS")
  add_definitions (-DNOMINMAX)
else()
  # unrecognized
  message( FATAL_ERROR "Unrecognized compiler [${CMAKE_CXX_COMPILER_ID}]" )
endif()

message(STATUS "TOOL_BUILD_DIR (DOWN):" ${TOOL_BUILD_DIR})

find_library(polyscopelib NAMES libpolyscope.a
    HINTS ${TOOL_BUILD_DIR}/src
    )

find_library(imguilib NAMES libimgui.a
    HINTS ${TOOL_BUILD_DIR}/deps/imgui
    )

find_library(glfwlib NAMES libglfw3.a
    HINTS ${TOOL_BUILD_DIR}/deps/glfw/src
    )


# NOTE: undef symbols, problem with linking, symbols are in the library, missing full linking step

# [ 50%] Linking CXX executable polyscopedemo
# Undefined symbols for architecture x86_64:
# "_CFArrayAppendValue", referenced from:
#     __glfwInitJoysticksNS in libglfw3.a(cocoa_joystick.m.o)
#     _matchCallback in libglfw3.a(cocoa_joystick.m.o)
# "_CFArrayCreateMutable", referenced from:
#     __glfwInitJoysticksNS in libglfw3.a(cocoa_joystick.m.o)
#     _matchCallback in libglfw3.a(cocoa_joystick.m.o)

# nm /Users/max/Developer/Stage/Workspace/3D/mmgtest/build/polyscope/src/libpolyscope.a | c++filt -p -i | grep ImGui
#                  U ImGui::BeginPopup(char const*, int)
#                  U ImGui::ArrowButton(char const*, int)
#                  U ImGui::GetMousePos()
#                  U ImGui::PopStyleVar(int)

# add_library(polyscopelib STATIC IMPORTED)

# set_property(TARGET polyscopelib PROPERTY
#              IMPORTED_LOCATION "${TOOL_BUILD_DIR}/src/libpolyscope.a")

add_executable(polyscopedemo demo_app.cpp)

target_include_directories(polyscopedemo PUBLIC "${TOOL_SOURCE_DIR}/include")
target_include_directories(polyscopedemo PUBLIC "${TOOL_SOURCE_DIR}/deps/glm")
target_include_directories(polyscopedemo PUBLIC "${TOOL_SOURCE_DIR}/deps/imgui/imgui")

target_link_libraries(polyscopedemo PUBLIC ${polyscopelib} ${glfwlib} ${imguilib})

# set_target_properties(polyscopedemo PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
